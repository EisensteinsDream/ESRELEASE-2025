-----------------------------------------------------------------------------------------------
PLEXIGLASS UTILITY LAYER VERSION 1.0
-----------------------------------------------------------------------------------------------

The Plexiglass Utility Layer (PLEX) is a games-focus library which abstracts SDL and PortAudio. It is intended to streamline the process of creating games. Notice, I call PLEX a utility layer rather than an engine. I do not consider PLEX a game engine. It is not intended to be a replacement for Unity or Godot or Unreal or whatever. It is intended to be a means for somebody who is interested in C/C++ programming to circumvent more of the annoying aspects of setting up a project.

PLEX is intended to be small, portable, and do everything one would need to create 2D games. It has it's own system of protected memory management and diagnostics, errors, config files, texture management, so on. The focus of PLEX is rapid development. It could also be utilized for prototyping pretty easily if one so wishes it.

PLEX has been compiled and tested on Linux and on Windows. I see no reason that more advanced users couldn't port it to Mac or BSD or any similar (ie. UNIX-based) operating system with ease. The only thing that stops it from being ported to Emscripten is the fact that it utilizes PortAudio. I may at some point add an SDL_audio backend, or even OpenAL, for that reason.

PLEX is based off of C (rather than C++). It's using the procedural paradigm rather than OOP. This is maybe what some people would consider an archaic or a deprecated design approach. I feel, however, this approach allows for everything intended. It's harder to maintain in some ways, but it's easier to mature in others. It's not bound by having to adjust to the flavor-of-the-month paradigm experiment. PLEX is frozen in time as a design choice.

For that reason, PLEX will at some point have a feature cutoff. To where it just won't be set up to do much more than it's already doing. I'm (very slowly) writing some openGL backends for it right now. There will be a kind of scripting system that's not featured here, but already semi-functional. It will likely be a key feature in PLEX V.2. It's already set up to be easily bindable to any language that can call C functions (which is veritably all of them). I will eventually put in some C++ exclusive features and other fancy stuff, too. However, it already does most everything it needs to do.

Most importantly PLEX is not a library designed by a corporate committee. Nobody's paycheck is tied to continually adding features. It doesn't need to appease anybody's ignorant, engineer-posing, tech bro bosses. It's not designed with the interest of pushing as many polygons on a screen at once. It's not even designed to pump out the next goldrush indie darling onto Steam as quickly as possible. It's designed for the sincere love of just crafting things. Of exploring the creative potential of code in a more deep, personal, sense. As an art, not commerce. That's why I'm disinterested in conforming the user to a unified paradigm. Programming is a viable form of self exploration that should be owned by all who chose to acquire it. True democratization of technology comes from this personal exploration; not from oversimplification designed to grift people into paying liscensing fees.

I'm hoping to write more documentation for PLEX in the future. It's difficult for me to actually write it in a timely fashion. This is a solo project. One of many. I'm working on limited time and energy here. However, since PLEX is foundational to all of my other projects, it's guaranteed to be maintained, matured, and documented. Again, just very slowly. If you want to get started experimenting with PLEX, there should be a folder called '0Template' that was packaged with this one. Instructions on how to build a template project (a process that should take minutes) is available there in a file called 'README_FIRST.txt'.

Everything is open source. It's your's now, have fun with it.
